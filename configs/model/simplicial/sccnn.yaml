_target_: topobenchmarkx.models.network_module.NetworkModule

feature_encoder:
  _target_: topobenchmarkx.models.encoders.default_encoders.BaseFaceFeatureEncoder
  in_channels_0: ${dataset.parameters.num_features}
  in_channels_1: ${dataset.parameters.num_features}
  in_channels_2: ${dataset.parameters.num_features}
  out_channels_0: ${model.backbone.in_channels_all[0]}
  out_channels_1: ${model.backbone.in_channels_all[1]}
  out_channels_2: ${model.backbone.in_channels_all[2]}

backbone:
  _target_: topomodelx.nn.simplicial.sccnn.SCCNN
  in_channels_all:
    - ${model.backbone.hidden_channels_all[0]}
    - ${model.backbone.hidden_channels_all[1]}
    - ${model.backbone.hidden_channels_all[2]}
  hidden_channels_all:
    - 32
    - 32
    - 32
  conv_order: 2
  sc_order: 3
  aggr_norm: False
  update_func: null
  n_layers: 2

loss:
  _target_: topobenchmarkx.models.losses.loss.DefaultLoss
  task: ${dataset.parameters.task}
  loss_type: ${dataset.parameters.loss_type}

# evaluator:
#   _target_: topobenchmarkx.evaluators.evaluator.Evaluator
#   metrics: [acc, rocauc]

readout:
  _target_: topobenchmarkx.models.readouts.default_readouts.GNNBatchReadOut
  task_level: ${dataset.parameters.task_level}
  in_channels: ${model.feature_encoder.out_channels_0}
  out_channels: ${dataset.parameters.num_classes}

# readout_workaround:
#   _target_: topobenchmarkx.models.readout_workaround.ReadOutWorkaround
#   backbone_outputs: ["x_0"]


backbone_wrapper:
  _target_: topobenchmarkx.models.wrappers.default_wrapper.SCCNNWrapper
  _partial_: true

optimizer:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 0.001 #0.01
  weight_decay: 0.0

scheduler:
  _target_: torch.optim.lr_scheduler.PolynomialLR
  _partial_: true
  last_epoch: -1
  total_iters: ${trainer.max_epochs}

# compile model for faster training with pytorch 2.0
compile: false
