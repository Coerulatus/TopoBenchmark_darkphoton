_target_: topobenchmarkx.models.network_module.NetworkModule

backbone:
  _target_: topomodelx.nn.hypergraph.unigcnii.UniGCNII
  in_channels: ${data.num_features}
  hidden_channels: 256
  n_layers: 1
  alpha: 0.5
  beta: 0.5
  input_drop: 0.2
  layer_drop: 0.2


loss:
  _target_: topobenchmarkx.models.losses.loss.DefaultLoss
  task: ${data.task}
# evaluator:
#   _target_: topobenchmarkx.evaluators.evaluator.Evaluator
#   metrics: [acc, rocauc]

readout:
  _target_: topobenchmarkx.models.readouts.NodeLevelReadOut
  task_level: ${data.task_level}
  in_channels: ${model.backbone.hidden_channels}
  out_channels: ${data.num_classes}

readout_workaround:
  _target_: topobenchmarkx.models.readout_workaround.ReadOutWorkaround
  backbone_outputs: ["x_0, x_1"]

optimizer:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 0.001
  weight_decay: 0.0

scheduler:
  _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
  _partial_: true
  mode: min
  factor: 0.1
  patience: 10

# compile model for faster training with pytorch 2.0
compile: false
