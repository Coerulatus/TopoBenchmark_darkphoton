_target_: topobenchmarkx.models.TopologicalNetworkModule

model_name: edgnn
model_domain: hypergraph

feature_encoder:
  _target_: topobenchmarkx.models.encoders.${model.feature_encoder.encoder_name}
  encoder_name: AllCellFeatureEncoder
  in_channels: ${infer_in_channels:${dataset}} #${dataset.parameters.num_features}
  out_channels: 16
  proj_dropout: 0.0

backbone:
  _target_: custom_models.hypergraph.edgnn.EDGNN
  num_features: ${model.feature_encoder.out_channels}  # ${dataset.parameters.num_features}
  input_dropout: 0.2
  dropout: 0.2
  activation: relu
  MLP_num_layers: 0
  All_num_layers: 1
  edconv_type: EquivSet
  aggregate: 'add'

backbone_wrapper:
  _target_: topobenchmarkx.models.wrappers.HypergraphWrapper
  _partial_: true
  wrapper_name: HypergraphWrapper
  out_channels: ${model.feature_encoder.out_channels}
  num_cell_dimensions: ${infere_list_length:${model.feature_encoder.in_channels}}

readout:
  _target_: topobenchmarkx.models.readouts.${model.readout.readout_name}
  readout_name: NoReadOut #  Use <NoReadOut> in case readout is not needed Options: PropagateSignalDown, NoReadOut
  hidden_dim: None
  num_cell_dimensions: None

head_model:
  _target_: topobenchmarkx.models.head_models.${model.head_model.head_model_name}
  head_model_name: ZeroCellModel
  in_channels: ${model.feature_encoder.out_channels}
  out_channels: ${dataset.parameters.num_classes}
  task_level: ${dataset.parameters.task_level}
  pooling_type: sum

loss:
  _target_: topobenchmarkx.models.losses.DefaultLoss
  task: ${dataset.parameters.task}
  loss_type: ${dataset.parameters.loss_type}

optimizer:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 0.01
  weight_decay: 0.0

scheduler:
  _target_: torch.optim.lr_scheduler.StepLR
  _partial_: true
  step_size: 50
  gamma: 0.5

# compile model for faster training with pytorch 2.0
compile: false
