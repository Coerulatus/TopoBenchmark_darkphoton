"""Test the message passing module."""
import pytest
import torch
import rootutils

from topobenchmarkx.transforms.liftings.graph2simplicial import SimplicialNeighborhoodLifting
from topobenchmarkx.io.load.loaders import manual_simple_graph

class TestSimplicialNeighborhoodLifting:
    """Test the SimplicialNeighborhoodLifting class."""
    def setup_method(self):
        # Load the graph
        self.data = manual_simple_graph()
        
        # Initialise the SimplicialNeighborhoodLifting class
        self.lifting_signed = SimplicialNeighborhoodLifting(complex_dim=3, signed=True)
        self.lifting_unsigned = SimplicialNeighborhoodLifting(complex_dim=3, signed=False)
    
    def test_lift_topology(self):
        # Test the lift_topology method
        lifted_data_signed = self.lifting_signed.forward(self.data.clone())
        lifted_data_unsigned = self.lifting_unsigned.forward(self.data.clone())
        expected_incidence_1 = torch.tensor(
            [[-1., -1., -1., -1., -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 1.,  0.,  0.,  0.,  0.,  0., -1., -1., -1., -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1., -1., -1.,  -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1., -1., -1., -1.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1., -1.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  0.,  1.,  0., -1., -1.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0., -1.],
             [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  1.,  1.]]
            )
        
        assert (abs(expected_incidence_1) == lifted_data_unsigned.incidence_1.to_dense()).all(), "Something is wrong with unsigned incidence_1 (nodes to edges)."
        assert (expected_incidence_1 == lifted_data_signed.incidence_1.to_dense()).all(), "Something is wrong with signed incidence_1 (nodes to edges)."
        
        expected_incidence_2 = torch.tensor(
            [[ 1.,  1.,  1.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [-1.,  0.,  0.,  0.,  0.,  1.,  1.,  1.,  1.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0., -1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  1.,  1.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0., -1.,  0.,  0.,  0., -1.,  0.,  0., -1.,  0.,  0.,  1.,  1., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0., -1.,  0.,  0.,  0., -1.,  0.,  0., -1.,  0., -1.,  0., 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0., -1.,  0.,  0., -1.,  0., -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  1.,  1.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0., -1.,  0.,  0.,  0.,  1.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0., -1.,  0.,  0., -1.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0., -1.,  0.,  0., -1.,  0., -1.,  0.,  1.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0., -1.,  0.,  0., -1.,  0., -1., -1.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  1., 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0., 0.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0., 0., -1.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1., 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0., -1.,  0., -1., -1.,  0.,  0.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  1.,  0., 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  1.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0., -1.,  0.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., 0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., 0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  1.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  1., -1.],
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  1.]])
        
        assert (abs(expected_incidence_2) == lifted_data_unsigned.incidence_2.to_dense()).all(), "Something is wrong with unsigned incidence_2 (edges to triangles)."
        assert (expected_incidence_2 == lifted_data_signed.incidence_2.to_dense()).all(), "Something is wrong with signed incidence_2 (edges to triangles)."

    def test_lifted_features_signed(self):
        # Test the lift_features method for signed case
        lifted_data = self.lifting_signed.forward(self.data)

        expected_features_1 = torch.tensor([[4.0000e+00],
                                            [9.0000e+00],
                                            [4.9000e+01],
                                            [9.9000e+01],
                                            [4.9900e+02],
                                            [4.9990e+03],
                                            [5.0000e+00],
                                            [4.5000e+01],
                                            [9.5000e+01],
                                            [4.9500e+02],
                                            [4.9950e+03],
                                            [4.0000e+01],
                                            [9.0000e+01],
                                            [4.9000e+02],
                                            [9.9000e+02],
                                            [4.9900e+03],
                                            [5.0000e+01],
                                            [4.5000e+02],
                                            [9.5000e+02],
                                            [4.9500e+03],
                                            [4.0000e+02],
                                            [4.9000e+03],
                                            [5.0000e+02],
                                            [4.5000e+03],
                                            [4.0000e+03]])
        
        assert (expected_features_1 == lifted_data.x_1).all(), "Something is wrong with x_1 features."

        expected_features_2 = torch.tensor([[0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.],
                                            [0.]])

        assert (expected_features_2 == lifted_data.x_2).all(), "Something is wrong with x_2 features."

    
    def test_lifted_features_unsigned(self):
        # Test the lift_features method for unsigned case
        lifted_data = self.lifting_unsigned.forward(self.data)

        expected_features_1 = torch.tensor([[   6.], #(0,1)
                                            [  11.], #(0,2)
                                            [  51.], #(0,3)
                                            [ 101.], #(0,4)
                                            [ 501.], #(0,5)
                                            [5001.], #(0,7)
                                            [  15.], #(1,2)
                                            [  55.], #(1,3)
                                            [ 105.], #...
                                            [ 505.],
                                            [5005.],
                                            [  60.],
                                            [ 110.],
                                            [ 510.],
                                            [1010.],
                                            [5010.],
                                            [ 150.],
                                            [ 550.],
                                            [1050.],
                                            [5050.],
                                            [ 600.],
                                            [5100.],
                                            [1500.],
                                            [5500.],
                                            [6000.]])
        
        assert (expected_features_1 == lifted_data.x_1).all(), "Something is wrong with x_1 features."

        expected_features_2 = torch.tensor([[   32.], #(0,1,2)
                                            [  112.], #(0,1,3)
                                            [  212.], #...
                                            [ 1012.],
                                            [10012.],
                                            [  122.],
                                            [  222.],
                                            [ 1022.],
                                            [10022.],
                                            [  302.],
                                            [ 1102.],
                                            [10102.],
                                            [ 1202.],
                                            [10202.],
                                            [11002.],
                                            [  130.],
                                            [  230.],
                                            [ 1030.],
                                            [10030.],
                                            [  310.],
                                            [ 1110.],
                                            [10110.],
                                            [ 1210.],
                                            [10210.],
                                            [11010.],
                                            [  320.],
                                            [ 1120.],
                                            [ 2120.],
                                            [10120.],
                                            [ 1220.],
                                            [10220.],
                                            [ 3020.],
                                            [11020.],
                                            [12020.],
                                            [ 1300.],
                                            [10300.],
                                            [ 3100.],
                                            [11100.],
                                            [11200.],
                                            [13000.]])

        assert (expected_features_2 == lifted_data.x_2).all(), "Something is wrong with x_2 features."